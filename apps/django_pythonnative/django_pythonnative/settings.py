"""
Django settings for django_pythonnative project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import io
import os
from pathlib import Path
from urllib.parse import urlparse

import environ
import google.auth
from google.cloud import secretmanager

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Start Google Cloud Secret Manager Integration
env = environ.Env(DEBUG=(bool, True))
env_file = os.path.join(BASE_DIR, ".env")

try:
    _, os.environ["GOOGLE_CLOUD_PROJECT"] = google.auth.default()
except google.auth.exceptions.DefaultCredentialsError:
    pass

if os.path.isfile(env_file):
    env.read_env(env_file)
elif os.environ.get("GOOGLE_CLOUD_PROJECT", None):
    project_id = os.environ.get("GOOGLE_CLOUD_PROJECT")
    client = secretmanager.SecretManagerServiceClient()
    settings_name = os.environ.get("SETTINGS_NAME", "django_settings")
    name = f"projects/{project_id}/secrets/{settings_name}/versions/latest"
    payload = client.access_secret_version(name=name).payload.data.decode("UTF-8")
    env.read_env(io.StringIO(payload))
else:
    raise Exception("No local .env or GOOGLE_CLOUD_PROJECT detected. No secrets found.")
SECRET_KEY = env("SECRET_KEY")
DEBUG = env("DEBUG")
# End Google Cloud Secret Manager Integration

CLOUDRUN_SERVICE_URL = env("CLOUDRUN_SERVICE_URL", default=None)
if CLOUDRUN_SERVICE_URL:
    ALLOWED_HOSTS = [urlparse(CLOUDRUN_SERVICE_URL).netloc]
    CSRF_TRUSTED_ORIGINS = [CLOUDRUN_SERVICE_URL]
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
else:
    ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "docs.apps.DocsConfig",
    "home.apps.HomeConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "storages",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "django_pythonnative.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "django_pythonnative.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {"default": env.db()}
if os.getenv("USE_CLOUD_SQL_AUTH_PROXY", None):
    DATABASES["default"]["HOST"] = "127.0.0.1"
    DATABASES["default"]["PORT"] = 5432


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

GS_BUCKET_NAME = env("GS_BUCKET_NAME")
DEFAULT_FILE_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"
STATICFILES_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"

# Cannot insert legacy ACL for an object when uniform bucket-level access is
# enabled. Read more at
# https://cloud.google.com/storage/docs/uniform-bucket-level-access
# GS_DEFAULT_ACL = "publicRead"

# The error you are facing occurs when your Google Cloud Storage bucket has
# "Uniform bucket-level access" enabled and the Django storages backend is
# attempting to set object-level permissions (legacy ACL), which are not
# supported when "Uniform bucket-level access" is on. One potential solution is
# to modify the storage settings in your Django application to not set public
# read ACLs during the upload process. The 'django-storages' library's Google
# Cloud Storage backend (GCloud) has a setting for this, GS_BLOB_CHUNK_SIZE.
GS_BLOB_CHUNK_SIZE = 1024 * 1024  # or any other chunk size you want
GS_DEFAULT_ACL = None

# The error message you're seeing, "you need a private key to sign credentials",
# is due to the fact that Google Cloud's client libraries are trying to create a
# signed URL using the default application credentials. However, the default
# application credentials (typically provided by a service account when running
# on Google Cloud, or via the GOOGLE_APPLICATION_CREDENTIALS environment
# variable pointing to a service account key file when running locally) do not
# include a private key.
#
# This is usually a problem when using Google Cloud Storage (GCS) with Django,
# and asking Django to serve a static file that's stored in GCS. The
# django-storages library will try to create a signed URL for that file, which
# requires a private key.
#
# There are few possible solutions for this:
#
# 1. Use a service account with a key file: When running the application
# locally, you can create a service account and download its key file. Then, set
# the GOOGLE_APPLICATION_CREDENTIALS environment variable to the path of that
# key file. This key file will contain a private key that can be used to sign
# URLs.
#
# 2. Remove URL signing: If all the static files are public (which seems to be
# your case), you can disable the URL signing, so that it just uses the plain
# URL of the object in GCS. Add this to your settings.py:
# GS_QUERYSTRING_AUTH = False
# This tells django-storages to not append the auth token to the URL when
# accessing a Blob.
GS_QUERYSTRING_AUTH = False

STATIC_URL = "static/"
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
